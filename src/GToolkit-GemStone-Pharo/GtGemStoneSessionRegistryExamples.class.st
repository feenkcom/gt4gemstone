Class {
	#name : #GtGemStoneSessionRegistryExamples,
	#superclass : #Object,
	#traits : 'TAssertable',
	#classTraits : 'TAssertable classTrait',
	#category : #'GToolkit-GemStone-Pharo-Examples'
}

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> addNewConnectorAnnouncement [
	"Confirm that an announcement is received from the session registry when a connector is added"
	<gtExample>
	| registry connector additionAnnouncement |

	registry := self sessionRegistry.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	registry 
		when: GtGemStoneConnectorAnnouncement 
		do: [ :anAnnouncement | additionAnnouncement := anAnnouncement ]
		for: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 1.
	self assert: registry connectors size equals: 0.

	connector := registry addNewConnector.

	self assert: connector class equals: GtGemStoneGciConnector.
	self assert: additionAnnouncement isNotNil.
	self assert: additionAnnouncement operation equals: #added.
	self assert: additionAnnouncement connector equals: connector.

	registry unsubscribe: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> addSessionAnnouncement [
	"Confirm that an announcement is received from the session registry when a session is added"
	<gtExample>
	| registry connector announcements session |

	registry := self addNewConnectorAnnouncement.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	announcements := OrderedCollection new.
	registry 
		when: GtGemStoneSessionAnnouncement 
		do: [ :anAnnouncement | announcements add: anAnnouncement ]
		for: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 1.
	self assert: registry connectors size equals: 1.
	self assert: registry activeSessions size equals: 0.

	connector := registry connectors anyOne.
	session := registry newSessionWithConnector: connector id: '11'.

	self assert: session class equals: GtGemStoneSession.
	self assert: announcements size equals: 2.
	self assert: announcements first class equals: GtGemStoneSessionAddedAnnouncement.
	self assert: announcements second class equals: GtGemStoneSessionDefaultAnnouncement.

	registry unsubscribe: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> changeConnectorName [
	"Confirm that a name change announcement is received from the session registry when a connector is renamed"
	<gtExample>
	| registry oldName connector announcement |

	registry := self addNewConnectorAnnouncement.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	registry 
		when: GtGemStoneConnectorAnnouncement 
		do: [ :anAnnouncement | announcement := anAnnouncement ]
		for: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 1.
	self assert: registry allConnectors size equals: 1.

	connector := registry connectorNamed: #connector1.
	self assert: connector class equals: GtGemStoneGciConnector.

	oldName := connector name.

	"Change the connector name.
	To allow for batched changes, it is up to the user to notify dependents of the name change."
	connector 
		name: 'newname';
		notifyNameChanged.

	self assert: announcement isNotNil.
	self assert: announcement operation equals: #updated.
	self assert: announcement isNameChange.
	self assert: announcement connector equals: connector.

	"Ensure the registry and properties file have updated their indexes"
	self deny: (registry hasConnectorNamed: oldName).
	self assert: (registry hasConnectorNamed: connector name).

	registry unsubscribe: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> propertiesFile [
	"Answer an empty properties file"
	<gtExample>
	| propertiesFile file |

	file := FileSystem memory root / 'gt4gemstone.properties'.
	propertiesFile := GtGemStonePropertiesFile file: file.
	"The properties file contains namedConnectors"
	self assert: propertiesFile size equals: 1.
	self assert: propertiesFile allConnectors size equals: 0.
	^ propertiesFile
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> removeConnectorAnnouncement [
	"Confirm that an announcement is received from the session registry when a connector is removed"
	<gtExample>
	| registry connector additionAnnouncement |

	registry := self addNewConnectorAnnouncement.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	registry 
		when: GtGemStoneConnectorAnnouncement 
		do: [ :anAnnouncement | additionAnnouncement := anAnnouncement ]
		for: self.
	self assert: registry announcer subscriptions numberOfSubscriptions = 1
		description: [ String streamContents: [ :stream |
			stream
				<< 'registry announcer should have a single subscription, not: ';
				print: registry announcer subscriptions ] ].
	self assert: registry connectors size = 1
		description: [ String streamContents: [ : stream |
			stream
				<< 'registry connectors should have a single entry, not: ';
				print: registry connectors ] ].

	connector := registry connectors anyOne.
	registry removeConnectorNamed: connector name.

	self assert: connector class equals: GtGemStoneGciConnector.
	self assert: additionAnnouncement isNotNil.
	self assert: additionAnnouncement operation equals: #removed.
	self assert: additionAnnouncement connector equals: connector.

	registry unsubscribe: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	self assert: registry announcer subscriptions numberOfSubscriptions = 0
		description: [ String streamContents: [ :stream |
			stream
				<< 'registry announcer subscriptions should be empty, not: ';
				print: registry announcer subscriptions ] ].

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> removeDefaultSession [
	"Confirm that removing a session that is the default results in the registy no longer having a default session"
	<gtExample>
	| registry session |

	registry := self addSessionAnnouncement.
	self assert: registry connectors size equals: 1.
	self assert: registry activeSessions size equals: 1.

	session := registry activeSessions anyOne.
	self assert: session identicalTo: registry defaultSession.

	registry removeSession: session.

	self deny: registry hasDefaultSession.

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> removeSessionAnnouncement [
	"Confirm that an announcement is received from the session registry when a session is removed"
	<gtExample>
	| registry announcements session |

	registry := self addSessionAnnouncement.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.
	announcements := OrderedCollection new.
	registry 
		when: GtGemStoneSessionAnnouncement 
		do: [ :anAnnouncement | announcements add: anAnnouncement ]
		for: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 1.
	self assert: registry connectors size equals: 1.
	self assert: registry activeSessions size equals: 1.

	session := registry activeSessions anyOne.
	registry removeSession: session.

	self assert: session class equals: GtGemStoneSession.
	self assert: announcements size equals: 1.
	self assert: announcements first class equals: GtGemStoneSessionRemovedAnnouncement.

	registry unsubscribe: self.
	self assert: registry announcer subscriptions numberOfSubscriptions equals: 0.

	^ registry
]

{ #category : #examples }
GtGemStoneSessionRegistryExamples >> sessionRegistry [
	"Answer an empty session registry"
	<gtExample>
	| registry |

	registry := GtGemStoneSessionRegistry new.
	registry propertiesFile: self propertiesFile.
	self assert: registry activeSessions size equals: 0.
	^ registry
]
