Class {
	#name : #GtGemStoneSourceCoderModel,
	#superclass : #GtSmalltalkSourceCoder,
	#category : #'GToolkit-GemStone-Lepiter-Coder'
}

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addEvaluateAddonsTo: anAst to: coderAddOns [
	<gtCoderContextMenuAddOns: 800>
	self
		addContextMenuItemFrom: GtSourceCoderDoItShortcut new
			withId: nil
			to: coderAddOns;
		addContextMenuItemFrom: GtSourceCoderDoItAndInspectShortcut new
			withId: nil
			to: coderAddOns;
		addContextMenuItemFrom: GtSourceCoderPrintItShortcut new
			withId: nil
			to: coderAddOns;
		addContextMenuItemFrom: GtSourceCoderDebugShortcut new
			withId: nil
			to: coderAddOns
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addFormatMethodAst: anAst to: coderAddOns [
	<gtCoderContextMenuAddOns: 250>
	self
		addContextMenuItemFrom: GtSourceCoderFormatShortcut new
		withId: nil
		to: coderAddOns
]

{ #category : #'add-ons - utils' }
GtGemStoneSourceCoderModel >> addLinkMenuAddOnsTo: coderAddOns node: node selector: sel shortcut: aShortcut requesterObject: aRequester [
	| highlightNode |
	(node isMessage or: [ node isMessageSend or: [ node isMethodPattern ] ])
		ifFalse: [ ^ self ].
	highlightNode := node isMessageSend ifTrue: [ node message ] ifFalse: [ node ].
	coderAddOns
		addContextMenuItem: (self
				createLabel: aShortcut name
				description: node selector)
		hover: (self highlightNodeBlock: highlightNode)
		leave: self removeHighlightBlock
		action: [ :aTextualViewModel | 
			self perform: sel with: highlightNode startPosition with: aRequester ]
		shortcutKey: aShortcut combinationForPlatform gtDisplayString
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addLocalClassMenuAddOnsAst: anAst to: coderAddOns from: aCoderViewModel [
	<gtCoderContextMenuAddOns: 11>
	
	(self extractableNodesFrom: aCoderViewModel)
		ifNotEmpty: [ :nodes | 
			| node foundClass |
			node := nodes first.
			node isVariable ifFalse: [ ^ self ].
			self
				variableNodeToBehavior: node
				ifFound: [ :aClass | foundClass := aClass ]
				ifNone: [ ^ self ].
			coderAddOns
				addContextMenuItem: (self
						createLabel: 'Browse local class'
						description: foundClass name)
				hover: (self highlightNodeBlock: node)
				leave: self removeHighlightBlock
				action: [ :aTextualViewModel | 
					self 
						browseLocalBehaviorAt: node startPosition 
						requesterObject: nil ]
				shortcutKey: GtGemStoneCoderBrowseLocalBehaviorShortcut new combinationForPlatform gtDisplayString ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addLocalImplementorsMenuAddOnsAst: anAst to: coderAddOns from: aCoderViewModel [
	<gtCoderContextMenuAddOns: 10>
	(self nodeFrom: aCoderViewModel)
		ifNotNil: [ :node | 
			self
				addLinkMenuAddOnsTo: coderAddOns
				node: node
				selector: #browseLocalImplementorsAt:requesterObject:
				shortcut: GtGemStoneCoderBrowseLocalImplementorsShortcut new
				requesterObject: aCoderViewModel ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addLocalInstanceVariableReferencesMenuAddOnsAst: anAst to: coderAddOns from: aCoderViewModel [
	<gtCoderContextMenuAddOns: 12>
	(self nodeFrom: aCoderViewModel)
		ifNotNil: [ :node | 
			(node isVariable and: [ self isLocalInstanceVariable: node ]) ifFalse: [ ^ self ].
			coderAddOns
				addContextMenuItem: (self
						createLabel: 'Browse local references'
						description: node name value)
				hover: (self highlightNodeBlock: node)
				leave: self removeHighlightBlock
				action: [ :aTextualViewModel | 
					self 
						browseLocalReferencesAt: node startPosition 
						requesterObject: aTextualViewModel ]
				id: nil
				shortcutKey: GtGemStoneCoderBrowseLocalReferencesShortcut new
						combinationForPlatform gtDisplayString ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> addLocalMessageReferencesMenuAddOnsAst: anAst to: coderAddOns from: aCoderViewModel [
	<gtCoderContextMenuAddOns: 15>
	(self nodeFrom: aCoderViewModel)
		ifNotNil: [ :node | 
			self
				addLinkMenuAddOnsTo: coderAddOns
				node: node
				selector: #browseLocalReferencesAt:requesterObject:
				shortcut: GtGemStoneCoderBrowseLocalReferencesShortcut new
				requesterObject: aCoderViewModel ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalBehaviorAt: aTextPosition requesterObject: aRequester [
	"Try to find a behavior reference at a given source text position and request to browse it"

	self
		detectBehaviorAt: aTextPosition
		ifFound: [ :aBehavior | 
			self
				notifyToolSpawn: (GtClassCoderTool observedClass: aBehavior)
				withDestination: self spawnDestination
				requesterObject: aRequester ]
		ifNone: [  ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalBehaviorIn: aSourceString requesterObject: aRequestor [
	"Try to find a behavior reference within a given source code and request to browse it"

	self
		detectBehaviorIn: aSourceString
		ifFound: [ :aBehavior | 
			self
				notifyToolSpawn: (GtClassCoderTool observedClass: aBehavior)
				withDestination: self spawnDestination
				requesterObject: aRequestor ]
		ifNone: [  ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalImplementorsAt: aTextPosition requesterObject: aRequester [
	"Try to find a message selector at a given source text position and request to browse it"

	self
		detectSelectorAt: aTextPosition
		ifFound: [ :aSelector | 
			self
				notifyObjectSpawn: (GtSearchImplementorsFilter selector: aSelector)
				requesterObject: aRequester ]
		ifNone: [  ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalImplementorsIn: aSourceString requesterObject: aRequester [
	"Try to find a message selector within a given source string and request to browse it"

	self
		detectSelectorIn: aSourceString
		ifFound: [ :aSelector | 
			self
				notifyObjectSpawn: (GtSearchImplementorsFilter selector: aSelector)
				requesterObject: aRequester ]
		ifNone: [  ]
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalReferencesAt: aTextPosition requesterObject: aRequester [
	"Try to create a references filter for an entity at the given text position and request to browse it"

	self
		notifyObjectSpawn: (self
				detectReferencesFilterAt: aTextPosition
				withBehavior: self localBehavior
				ifFound: [ :aReferencesFilter | aReferencesFilter ]
				ifNone: [ GtSearchNullFilter new ])
		requesterObject: aRequester
]

{ #category : #'add-ons' }
GtGemStoneSourceCoderModel >> browseLocalReferencesIn: aSourceString requesterObject: aRequester [
	"Try to create a references filter for an entity within a given source string and request to browse it"

	self
		notifyObjectSpawn: (self
				detectReferencesFilterIn: aSourceString
				withBehavior: self localBehavior 
				ifFound: [ :aReferencesFilter | aReferencesFilter ]
				ifNone: [ GtSearchNullFilter new ])
		requesterObject: aRequester
]

{ #category : #'api - ast' }
GtGemStoneSourceCoderModel >> computeAst: theSourceString [
	^ GtGemStoneParser
		parseWithErrors: theSourceString
		startingAt: self startingStateForAstComputation
]

{ #category : #'private - actions' }
GtGemStoneSourceCoderModel >> copyWithInsertedHaltStatementIntoSource: aSourceString [ 
	| method |
	
	method := RBParser parseMethod: 'm', ' ', aSourceString.
	method body 
		addNodeFirst: (RBParser parseExpression: 'self halt').
	^ String streamContents: [ :aStream |
		method formatterStatementComments
			ifNotEmpty: [ :currentComments |
				currentComments 
					do: [ :aNode |
						aStream nextPutAll: ' "'.
						aStream nextPutAll: aNode contents.
						aStream nextPutAll: '" '.
					] separatedBy: [
						aStream lf ].
				aStream lf ].
		aStream nextPutAll: method body formattedCode ]
]

{ #category : #'api - actions' }
GtGemStoneSourceCoderModel >> formatWithRequesterObject: aRequester [
	"We use the same formatter for Pharo code"
	| ast |
	ast := [ RBParser parseExpression: self currentSourceString ]
			on: SyntaxErrorNotification
			do: [ :ex |
				^ self
					notifyParseError: ex errorMessage
					at: ex location
					requesterObject: aRequester ].

	self currentSourceString: ast formattedCode
]

{ #category : #initialization }
GtGemStoneSourceCoderModel >> initializeAddOns: addOns [
	super initializeAddOns: addOns.

	addOns addStyler: GtGemStoneStyler new.
]

{ #category : #initialization }
GtGemStoneSourceCoderModel >> initializeShortcuts: addOns [
	| shortcuts |
	super initializeShortcuts: addOns.

	shortcuts := {
			GtGemStoneCoderBrowseLocalImplementorsShortcut.
			GtGemStoneCoderBrowseLocalReferencesShortcut.
			GtGemStoneCoderBrowseLocalBehaviorShortcut.
			GtSourceCoderDiscardChangesShortcut.
			GtSourceCoderFormatShortcut.
			GtSourceCoderDebugShortcut.
			"GtSourceCoderInlineRenameShortcut."
			GtSourceCoderMoveStatementUpShortcut.
			GtSourceCoderMoveStatementDownShortcut.
			GtSourceCoderSelectStatementUpShortcut.
			GtSourceCoderSelectStatementDownShortcut.
			"GtSourceCoderFixItShortcut."
			GtSourceCoderPrintItShortcut} collect: #new.

	addOns addShortcuts: shortcuts
]

{ #category : #testing }
GtGemStoneSourceCoderModel >> isLocalInstanceVariable: aNode [
	^ self localBehavior allInstVarNames includes: aNode name value
]

{ #category : #accessing }
GtGemStoneSourceCoderModel >> localBehavior [
	^ UndefinedObject
]

{ #category : #'instance creation' }
GtGemStoneSourceCoderModel >> newCompletionStrategy [
	^ GtCompletionStrategy new
]

{ #category : #'private - actions' }
GtGemStoneSourceCoderModel >> primitiveDebug: aSourceString inContext: aGtGemStoneCoderEvaluationContext onFailDo: anEvaluationFailBlock [
	| sourceStringWithHalt guineaPig |
	sourceStringWithHalt := self copyWithInsertedHaltStatementIntoSource: aSourceString.
	
	"In case of gemstone we create a new process and run the computation that should. If we get errors here, another option would be to spawn in a new process just the opening of the GemStone debugger, or schedule a UI task to execute the evaluation."
	guineaPig := [
		self 
			primitiveEvaluate: sourceStringWithHalt 
			inContext: aGtGemStoneCoderEvaluationContext 
			onFailDo: anEvaluationFailBlock ] newProcess.
	guineaPig name: 'GemStone Coder Debug Process'.
	guineaPig resume
]

{ #category : #accessing }
GtGemStoneSourceCoderModel >> startingStateForAstComputation [
	self subclassResponsibility
]

{ #category : #accessing }
GtGemStoneSourceCoderModel >> targetAstParserClass [
	^ GtGemStoneParser
]
